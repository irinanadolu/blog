<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="dita_for_small_teams">
    <title>DITA For Small Technical Documentation Teams</title>
    <prolog>
        <author>Radu Coravu</author>
        <critdates>
            <created date="2020-01-21" class="- topic/created "/>
        </critdates>
    </prolog>
    <body>
        <p>There are many cases in which a handful of technical writers in a company need to
            collaborate on a DITA project and they may not have the resources to invest in an open
            source content management system. So this blog post is about setting up a viable, cost
            efficient DITA documentation editing and publishing solution which can scale up (both in
            number of writers and content) using Oxygen XML Author and <xref
                href="https://github.com/" format="html" scope="external">Github</xref>. As a
            showcase for the proposed solution we will have the <xref href="welcome.dita">Oxygen XML
                Blog</xref>.</p>
        <section id="section_zdt_gbq_tkb">
            <title>Overview of Tools Proposed for the Solution</title>
            <p>The following list of tools and application will be used in our solution:</p>
            <dl>
                <dlentry>
                    <dt>Content Management and Workflow</dt>
                    <dd><xref href="https://github.com/" format="html" scope="external"
                            >Github</xref> for storing the DITA content.</dd>
                    <dd><xref href="https://github.com/" format="html" scope="external"
                            >Github</xref> for creating and managing issues.</dd>
                </dlentry>
                <dlentry>
                    <dt>Editing</dt>
                    <dd><xref href="https://www.oxygenxml.com/xml_author.html" format="html"
                            scope="external">Oxygen XML Author</xref> for editing the DITA content
                        and for offline publishing.</dd>
                    <dd>[Optional] <xref href="https://www.oxygenxml.com/xml_web_author.html"
                            format="html" scope="external">Oxygen Web Author</xref> for online
                        editing/reviewing of DITA content.</dd>
                </dlentry>
                <dlentry>
                    <dt>Review</dt>
                    <dd>[Optional] <xref href="https://www.oxygenxml.com/content_fusion.html"
                            format="html" scope="external">Oxygen Content Fusion</xref> for creating
                        review tasks for subject matter experts.</dd>
                </dlentry>
                <dlentry>
                    <dt>Publishing</dt>
                    <dd><xref href="https://www.oxygenxml.com/xml_author.html" format="html"
                            scope="external">Oxygen XML Author</xref> for publishing from inside the
                        application.</dd>
                    <dd>[Optional] <xref href="https://www.oxygenxml.com/publishing_engine.html"
                            format="html" scope="external">Oxygen Publishing Engine</xref> for
                        publishing to PDF and WebHelp DITA content on an integration server.</dd>
                    <dd>[Optional] <xref href="https://www.oxygenxml.com/oxygen_feedback.html"
                            format="html" scope="external">Oxygen WebHelp Feedback</xref> engine for
                        embedding feedback forms in the HTML pages.</dd>
                    <dd>[Optional] <xref href="https://gradle.org/" format="html" scope="external"
                            >Gradle</xref> to script the publishing in preparation for an
                        integration server.</dd>
                    <dd>[Optional] <xref href="https://www.netlify.com/" format="html"
                            scope="external">Netlify</xref> to build and host a web site for the
                        DITA content.</dd>
                    <dd>[Optional] <xref href="https://www.oxygenxml.com/oxygen_scripting.html"
                            format="html" scope="external">Oxygen Validate and Check for
                            Completeness</xref> used with a scripting license to check for
                        validation problems on an integration server.</dd>
                </dlentry>
            </dl>
            <p>The same set of tools has been used for editing and publishing the Oxygen XML Blog:
                    <xref href="welcome.dita"/>.</p>
        </section>
        <section id="section_or5_j2q_tkb">
            <title>Learning DITA</title>
            <p>There are various online resources for learning DITA, there are also learning DITA
                courses held by consulting companies. This older blog post has some useful links:
                    <xref href="learnDita.dita"/>.</p>
        </section>
        <section id="section_v4f_32q_tkb">
            <title>Project Storage - Using GitHub</title>
            <p>You need a system to:<ul id="ul_ycj_r2q_tkb">
                    <li>Store your DITA content. </li>
                    <li>Collaborate with your colleagues on writing content in the same project. </li>
                    <li>Allow for reviewers to propose changes without having the right to commit
                        changes.</li>
                    <li>Have a history of changes on each DITA resource, being able to revert to
                        previous versions of topics.</li>
                    <li>See who changed what content in each DITA topic and map.</li>
                    <li>Be able to tag releases so you can build manuals for older releases with
                        some changes applied to them.</li>
                    <li>Maintain a list of issues which are closed as your work progresses.</li>
                </ul></p>
            <p>Some small teams instead of using a version control system resort to shared network
                drives. Shared network drives do not address all the features above and they are
                dangerous in the fact that you can overwrite other people's work and there is no way
                to revert changes.</p>
            <p>A free <xref href="https://github.com/" format="html" scope="external">Github</xref>
                account can cover all these use cases listed above. GitHub exposes through a web
                interface access to a Git repository. This blog post is not about learning Git, it's
                about having minimum Git skills to get you started. There is a good book about
                learning Git Here: <xref
                    href="https://www.manning.com/books/learn-git-in-a-month-of-lunches"
                    format="html" scope="external"/>.</p>
            <p>We'll outline below some steps to get you started with a GitHub project:<ol
                    id="ol_q1t_5hr_tkb">
                    <li>Create a GitHub account: <xref href="https://github.com/join" format="html"
                            scope="external"/>.</li>
                    <li>Create a new public or private repository in the organization for your
                        project. </li>
                    <li>Create an organization: <xref
                            href="https://github.com/settings/organizations" format="html"
                            scope="external"/>. The organization will be useful to group
                        work-related projects. For adding private repositories in an organization
                        you will need to switch to a paid plan.</li>
                    <li>Add your team members to the organization. Using the team member GitHub user
                        names you can send them invitations to be contributors to the project.</li>
                </ol></p>
        </section>
        <section id="section_kdx_3wy_tkb">
            <title>Creating and Modifying Content in the Repository</title>
            <p>You can create and edit DITA topics in a number of ways:<ul id="ul_l2s_kwy_tkb">
                    <li>Edit topics offline and use GitHub's user interface to upload them, or
                        modify existing topics using GitHub's web interface.</li>
                    <li>Use the <xref
                            href="https://www.oxygenxml.com/oxygen-xml-web-author/app/oxygen.html"
                            format="html" scope="external">Oxygen Web Author</xref> to connect to
                        the Git Repository and create a new topic or modify an existing one.</li>
                    <li>Clone the repository to the local file system using Oxygen XML Author with
                        the <xref href="https://www.oxygenxml.com/doc/ug-addons/topics/git-addon.html"
                            format="html" scope="external">Git Add-on</xref> installed.</li>
                </ul></p>
        </section>
        <section id="section_khz_rxy_tkb">
            <title>Using Oxygen XML Author to Create/Modify Content in the Repository</title>
            <p>
                <ul id="ul_cf2_5xy_tkb">
                    <li>Install the <xref href="https://www.oxygenxml.com/doc/ug-addons/topics/git-addon.html"
                            format="html" scope="external">Git Add-on</xref> in Oxygen XML
                        Author.</li>
                    <li>Open the <uicontrol>Git Staging</uicontrol> view and use the
                            <uicontrol>+</uicontrol> toolbar button to paste the reference to the
                        reference to your project, for example
                            <codeph>https://github.com/oxygenxml/blog</codeph>. </li>
                    <li>Choose a location on the local drive where the project will be cloned.</li>
                    <li>The <uicontrol>Git Staging</uicontrol> view does not show all existing
                        resources in the project, it will just show the modified resources, so go to
                        the <uicontrol>Project</uicontrol> menu and create a new Oxygen project in
                        the folder where the project was cloned.</li>
                    <li>In the <uicontrol>Git Staging</uicontrol> view the newly created
                            <filepath>project.xpr</filepath> should now appear. Select it, use the
                            <uicontrol>Stage Selected</uicontrol> button to stage it, then write a
                        commit message and use the <uicontrol>Commit</uicontrol> message to commit
                        it. Now the file is committed in your local repository. You can use the
                        toolbar <uicontrol>Push</uicontrol> button to push it to the GitHub
                        account.</li>
                    <li>Create a <xref
                            href="https://www.oxygenxml.com/doc/ug-editor/topics/eppo-first-dita-topic-2.html"
                            format="html" scope="external">DITA Map and a couple of topics</xref>
                        using Oxygen's <uicontrol>Project</uicontrol> view.</li>
                    <li>Using the same <uicontrol>Git Staging</uicontrol> view you can see the newly
                        added files, stage, commit and push them to the remote GitHub repository.
                        You can check on the remote <b>GitHub</b> repository that the files were
                        updated.</li>
                    <li>If changes are made by someone else using the same technique or if changes
                        to maps and topics are made directly from the <b>GitHub</b> web interface or
                        from the Oxygen WebAuthor, the <uicontrol>Git Staging</uicontrol> view has a
                            <uicontrol>Pull</uicontrol> toolbar button allowing you to obtain those
                        changes locally.</li>
                    <li>On resources which have been modified a number of times you can right click
                        in the staging area and choose <b>Show in history</b> to see a history of
                        changes. You can also choose <b>Show blame</b> to see who modified each of
                        the lines in the document.</li>
                </ul>
            </p>
            <p>Here's a simplified overview of how you could work with Oxygen and Git:<ul
                    id="ul_jgp_f1z_tkb">
                    <li>Every time you start Oxygen or every time before you commit use the
                            <uicontrol>Pull</uicontrol> toolbar button from the <uicontrol>Git
                            Staging</uicontrol> view to get changes locally.</li>
                    <li>Stage and commit your changes, then push them to the remote repository.</li>
                    <li>If you attempt to pull changes including a file which is already modified
                        locally by you, the pull operation will not succeed. You will need to copy
                        that file separately, pull the content from the server and then compare your
                        changes to the ones coming from the server and merge your changes.</li>
                    <li>If you have already committed to your local repository a resource modified
                        also on the remote repository, you have a conflict, the <b>Git Staging</b>
                        view allows you to edit the conflict, merge the changes locally and then
                        commit to the local repository and push changes to the server.</li>
                    <li>You do not have to pull and push changes from and to the remote repository
                        very often, you can continue working with your local repository for days and
                        push all changes at the end but not pulling changes from the server often
                        might result in various conflicts if the same resources are modified both on
                        the server and in your local repository.</li>
                </ul></p>
        </section>
        <section id="section_o51_yfz_tkb">
            <title>Organizing Your Project Structure using the Master Files Support</title>
            <p>You can now start to <xref
                    href="https://github.com/oxygenxml/dita-project-best-practices" format="html"
                    scope="external">organize your content</xref>. The Oxygen user's manual contains
                a <xref
                    href="https://www.oxygenxml.com/doc/ug-editor/topics/eppo-first-dita-topic-2.html"
                    format="html" scope="external">Getting Started</xref> guide for DITA
                editing.</p>
            <p>You can right click the <uicontrol>Project</uicontrol> root and <xref
                    href="https://www.oxygenxml.com/doc/ug-editor/topics/dita-main-files.html"
                    format="html" scope="external">enable main files</xref>, then in the
                    <uicontrol>Main Files</uicontrol> folder add a reference to the main DITA map
                (or maps). All refactoring operations (move resources to subfolders, rename topics
                or resources) will properly update references in the entire DITA project hierarchy.
                A minimal DITA project would probably contain:<ul id="ul_xl4_sqb_vkb">
                    <li>One or more main DITA Maps.</li>
                    <li>One or more DITA submaps, defining keys for reusable content.</li>
                    <li>One or more folders containing reusable DITA elements.</li>
                    <li>A folder containing one or more DITAVAL filter files.</li>
                    <li>A folder containing images or binary resources.</li>
                </ul></p>
        </section>
  <section id="section_g2k_yjz_ykb">
   <title>Overall management of the DITA project</title>
   <p>
    <ul id="ul_l51_zjz_ykb">
     <li>The <uicontrol>Search References</uicontrol> contextual menu actions from the DITA Maps
      Manager and from the main editor allow you to check where a topic, map or image is being
      used.</li>
     <li>The <uicontrol>Remove from disk</uicontrol> action in the DITA Maps Manager view will warn
      if the removed topic is used in multiple places.</li>
     <li>Validation errors are issued for references to missing topics or images.</li>
     <li><uicontrol>Move/Rename</uicontrol> actions located both in the Oxygen Project and DITA Maps
      Manager view allow you to move topics/maps or images and have references to them automatically
      updated.</li>
                    <li>Search for references to IDs or rename IDs in the entire project.</li>
     <li>The <uicontrol>Find unreferenced resources</uicontrol> contextual menu action in the DITA
      Maps Manager allows you to find orphan topics or other resources (images, etc).</li>
     <li>You can define profiling condition sets and use them to see in the editing area what
      content is filtered, then use the same profiling condition sets for publishing.</li>
     <li>The <uicontrol>Open/Find Resource</uicontrol> side view allows you to locate files by
      content.</li>
     <li>The change tracking support in Oxygen allows you to make changes with change tracking or to
      add or reply to existing comments.</li>
    </ul>
   </p>
            <p>You can find out more DITA editing tips in the <xref
                    href="dita_oriented_tips_and_tricks.dita">DITA Editing Tips And Tricks
                    blog</xref>.</p>
  </section>
        <section id="section_kdj_3cz_tkb">
            <title>Sharing Common Settings using the Project</title>
            <p>The Oxygen project configuration can save various sets of global options at project
                level. As an example:<ul id="ul_ovy_kcz_tkb">
                    <li>Go to the Oxygen <uicontrol>Preferences->Editor / Spell Check</uicontrol>
                        page and change the radio button at the bottom to <uicontrol>Project
                            Options</uicontrol>. Then check the <uicontrol>Automatic spell
                            check</uicontrol> checkbox.</li>
                    <li>The <uicontrol>Git Staging</uicontrol> view should have a modified version
                        of the XPR showing as modified, stage, commit and push it.</li>
                    <li>Now everybody using the same <filepath>project.xpr</filepath> project file
                        loaded in Oxygen will have spell check enabled.</li>
                </ul></p>
            <p>Other useful settings you could switch to <uicontrol>Project Options</uicontrol>:<ul
                    id="ul_h3t_tcz_tkb">
                    <li>The <uicontrol>Project Level Settings</uicontrol> preferences dialog allows
                        you to control if various settings are saved at project or global level. For
                        example you can save the <uicontrol>Validate and check for
                            completeness</uicontrol> settings at project level and share them with
                        others.</li>
                    <li>The <uicontrol>Editor / Spell Check / Dictionaries</uicontrol> preferences
                        page can contain your own <xref
                            href="https://www.oxygenxml.com/doc/ug-editor/topics/spell-dictionary-Hunspell.html"
                            format="html" scope="external">set of dictionary terms</xref>.</li>
                    <li>The <uicontrol>Document Templates</uicontrol> preferences page allows you to
                        use your own custom new file templates.</li>
                    <li>In the <uicontrol>Editor / Save</uicontrol> preferences you can save at
                        project level various save options.</li>
                    <li>Switching the <uicontrol>Menu Shortcut Keys</uicontrol> preferences page to
                        project level allows you to share with others custom menu shortcut
                        keys.</li>
                </ul>You can use the <b>${pd}</b> editor variable to refer to resources located in
                the current project folder. You can read more about editor variables <xref
                    href="all_about_editor_variables.dita">here</xref>.</p>
        </section>
        <section id="section_evr_2wb_vkb">
            <title>Manual Publishing</title>
            <p>You can open DITA Maps in the application <b>DITA Maps Manager</b> view and publish
                them to various outputs using the <b>Configure Transformation Scenarios</b> toolbar
                button. A transformation scenario can also specify a DITAVAL filter, parameters and
                can be saved at project level. The published content can be later uploaded to a web
                server.</p>
            <p>For <b>WebHelp</b> output you can create a <xref
                    href="https://www.oxygenxml.com/doc/ug-editor/topics/whr-create-publishing-template-x.html"
                    format="html" scope="external">publishing template</xref> containing custom
                CSSs, headers, footers and logos. The publishing template can be saved in the
                project and referenced from the transformation scenario.</p>
            <p>For the <b>PDF</b> output the same publishing template can be used. To build your
                custom CSS you can use the <xref href="https://styles.oxygenxml.com/" format="html"
                    scope="external">Oxygen Styles Basket</xref> online CSS-builder.</p>
            <p>If you are publishing multiple DITA Maps or you have multiple filters or multiple
                deliverable formats you may want to create a DITA Open Toolkit project file: <xref
                    href="https://www.oxygenxml.com/doc/ug-editor/topics/dita_open_toolkit_project.html"
                    format="html" scope="external"/>. A sample DITA OT project file can be found in
                the <xref href="https://github.com/oxygenxml/blog/blob/master/blog-project.xml"
                    format="html" scope="external">Oxygen XML Blog project on GitHub</xref>.</p>
        </section>
        <section id="section_eq5_kbz_tkb">
            <title>Working with Branches</title>
            <p>You may need to mark releases of your product and also to be able to contribute small
                fixes to those releases. So here's how you work with branches:<ul
                    id="ul_brd_4bz_tkb">
                    <li>The default branch in the project is called <b>master</b> and this is the
                        branch we've been working until now.</li>
                    <li>Using <b>GitHub</b>'s web interface you can create your own branch.</li>
                    <li>Check out again in the <uicontrol>Git Staging</uicontrol> view the project,
                        this time with the separate branch in a separate folder. </li>
                    <li>Open the <filepath>project.xpr</filepath> from that branch's checkout, make
                        changes to the content there, stage, commit and push as usual.</li>
                </ul></p>
        </section>
        <section id="section_yxk_mhz_tkb">
            <title>Establishing a Workflow</title>
            <p>You can use the <b>GitHub</b> issues list for your project to create new issues. You
                can attach files to the issue, assign the issue, discuss with other participants,
                register to watch particular issues. Once a commit is made with a particular
                    <b>#issue_number</b>, the issue will get an automatic link pointing to the
                commit.</p>
            <p>Inside an organization or inside a repository you can create <xref
                    href="https://help.github.com/en/github/managing-your-work-on-github/about-project-boards"
                    format="html" scope="external">project boards</xref>. A project board can define
                states for your issues. When an issue is opened it can be assigned to a certain
                project board. It can also be assigned various labels. Issues can also be assigned
                to various people in your team.</p>
            <p>Oxygen's <xref
              href="https://www.oxygenxml.com/doc/ug-editor/topics/author-managing-changes.html"
                    format="html" scope="external">change tracking support</xref> allows you to
                insert or delete content with change tracking or to make comments on content. The
                Web Author online editing tool allows you to also make changes with change
                tracking.</p>
            <p>The <xref href="https://www.oxygenxml.com/content_fusion.html" format="html"
                    scope="external">Oxygen Content Fusion</xref> add-on allows you to create review
                tasks and to allow subject matter experts to give you feedback on DITA content
                directly from a web browser.</p>
        </section>
        <section id="section_dr1_4qb_vkb">
            <title>Adding Custom Validation Checks to the Project</title>
            <p>There are a couple of ways in which you can add custom validation checks to your
                    project:<ul id="ul_gfy_lrb_vkb">
                    <li>You can create a custom Schematron schema containing custom validation
                        rules: <xref href="sharing_schematron_validation_rules.dita"/>.</li>
                    <li>The <b>Validate and Check For Completion</b> action from the <b>DITA Maps
                            Manager</b> view contains various settings which can be saved at project
                        level. In the <b>Preferences->Project Level Settings</b> page there is a
                            <b>Save DITA Map validate and check for completeness settings at project
                            level</b> checkbox.</li>
                    <li>You can also add terminology checking in the application: <xref
                            href="checking_terminology_with_oxygen_xml_editor.dita"/>.</li>
                    <li id="li_lr2_qsj_5wb">In GitHub projects you can configure custom actions and
						run validate and check for completeness with a <xref
							href="https://www.oxygenxml.com/oxygen_scripting.html" format="html"
							scope="external">special scripting license</xref> on pull requests. An
						example for such a validation action is in the Oxygen XML Blog: <xref
							href="https://github.com/oxygenxml/blog/blob/master/.github/workflows/"
							format="yml" scope="external"/>. The validation runs on any opened pull
						request: <xref href="https://github.com/oxygenxml/blog/pull/25"
							format="html" scope="external"/>.</li>
                </ul></p>
        </section>
        <section id="section_wtj_vvb_vkb">
            <title>Adding Custom Actions</title>
            <p>You can use a framework customization saved at project level to add custom actions
                which can be used in the <b>Author</b> visual editing mode and can be mounted in the
                toolbar, menus and the content completion window: <xref
                    href="custom-author-action-js-based.dita"/>.</p>
        </section>
        <section id="section_jt4_t1c_vkb">
            <title>Dynamic Publishing using an Integration Server</title>
            <p>Using a bit of scripting you can publish the modified content on the fly with either
                using free online services like Netlify or Travis or using an internal Jenkins
                server. The <xref href="welcome.dita">Oxygen XML Blog</xref> is an example for this.
                It has a Gradle script which is run as part of a Netlify account whenever changes
                are made to the topics.</p>
        </section>
  <section id="section_lfz_wkz_ykb">
   <title>Translating your content</title>
   <p>The Oxygen <xref href="https://github.com/oxygenxml/oxygen-dita-translation-package-builder"
                    format="html" scope="external">Translation Package Builder</xref> add-on allows
                you to find the changed resources in a DITA project and then to pack those changed
                resources and send them for translation. It also helps with integrating the received
                translation in the project. This <xref href="translating_your_dita_project.dita"
                    >blog post</xref> has more details and useful links about translating DITA
                projects.</p>
  </section>
    </body>
  <related-links>
    <link
      href="https://www.oxygenxml.com/events/2020/webinar_using_dita_for_small_technical_documentation_teams.html"
      format="html" scope="external">
      <linktext>Webinar: Using DITA for Small Technical Documentation Teams</linktext>
    </link>
  </related-links>
</topic>
