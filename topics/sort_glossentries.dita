<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_eph_k3j_kcb">
    <title>Sorting Glossary Lists in a DITA Bookmap</title>
    <prolog>
        <author>Radu Coravu</author>
    </prolog>
    <body>
        <p>The idea behind this DITA refactoring action started from this forum post: <xref
                href="https://www.oxygenxml.com/forum/viewtopic.php?f=2&amp;t=15284&amp;p=45137#p45137"
                format="php" scope="external"/>.</p>
        <p>Suppose you have a DITA Bookmap that at some point references all of its glossary
      entries:<codeblock outputclass="language-xml">            &lt;glossarylist>
                &lt;topicref href="glossary/glossItem1.dita"/>
                &lt;topicref href="glossary/glossItem2.dita"/>
                &lt;topicref href="glossary/glossItem3.dita"/>
                &lt;topicref href="glossary/glossItem4.dita"/>
            &lt;/glossarylist></codeblock>and
      you want to have all of these glossary topics sorted alphabetically by title as they appear in
      the PDF output. </p>
        <p>One option for this is to create a PDF customization that automatically sorts the
      glossary entries no matter what order they were originally specified in the DITA Map.</p>
        <p>The other option is to create a <xref
        href="https://www.oxygenxml.com/doc/ug-editor/topics/custom-refactoring-operations.html"
        format="html" scope="external">custom Oxygen XML Refactoring</xref> operation that, when
      applied on the DITA Bookmap containing the "glossarylist", will sort the glossentries in
      alphabetical order according to the title of each glossentry.</p>
    <p>The following steps will help you achieve this:<ol id="ol_zt4_kjj_kcb">
        <li>
          <p>Somewhere on disk, create a folder (for example, <b>customRefactor</b>) and add a
            reference to it in the Oxygen <b>Preferences->"XML / XML Refactoring"</b> page.</p>
        </li>
        <li>
          <p>In that custom folder, create an XML file (for example, <b>sortGlossentries.xml</b>)
            that has the following content:</p>
          <codeblock outputclass="language-xml">&lt;refactoringOperationDescriptor 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://www.oxygenxml.com/ns/xmlRefactoring" id="op_tck_rp1_hcb" name="Sort glossentries">
    &lt;description>Sort glossentries.&lt;/description>    
    &lt;script type="XSLT" href="sortGlossentries.xsl"/>
&lt;/refactoringOperationDescriptor></codeblock>
          <p>This particular descriptor file contains the name of the operation, its description,
            and points to an XSLT stylesheet that will be applied to sort the entries in the DITA
            Bookmap.</p>
        </li>
        <li>
          <p>In the same folder, create a file called <b>sortGlossentries.xsl</b> with the following
            content:</p>
          <codeblock outputclass="language-xml">&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    exclude-result-prefixes="xs"
    version="2.0">
    &lt;xsl:template match="node() | @*">
        &lt;xsl:copy>
            &lt;xsl:apply-templates select="node() | @*"/>
        &lt;/xsl:copy>
    &lt;/xsl:template>
    &lt;xsl:template match="glossarylist | topicgroup[@outputclass='glossarylist']">
        &lt;xsl:copy>
            &lt;xsl:apply-templates select="@*"/>
            &lt;xsl:variable name="closestXMLLang" select="ancestor-or-self::*[attribute::xml:lang][1]/@xml:lang"/>
            &lt;xsl:choose>
                &lt;xsl:when test="exists($closestXMLLang)">
                    &lt;xsl:for-each select="*" >
                        &lt;xsl:sort select="document(@href, .)/*/glossterm/text()" lang="{$closestXMLLang}" case-order="lower-first"/>
                        &lt;xsl:apply-templates select="."/>
                    &lt;/xsl:for-each>
                &lt;/xsl:when>
                &lt;xsl:otherwise>
                    &lt;xsl:for-each select="*" >
                        &lt;xsl:sort select="document(@href, .)/*/glossterm/text()" case-order="lower-first"/>
                        &lt;xsl:apply-templates select="."/>
                    &lt;/xsl:for-each>
                &lt;/xsl:otherwise>
            &lt;/xsl:choose>
        &lt;/xsl:copy>
    &lt;/xsl:template>
&lt;/xsl:stylesheet></codeblock>
          <p>This particular XSLT processing copies almost all the Bookmap content unchanged.
            However, the topicrefs in the <b>glossarylist</b> are sorted according to the
              <b>glossterm</b> titles specified inside each of them.</p>
        </li>
        <li>
          <p>Restart Oxygen.</p>
        </li>
        <li>
          <p>Open the bookmap that contains the <b>glossarylist</b> in the Oxygen main editing area,
            right-click, choose <b>Refactoring</b> and in the <b>Other operations</b> submenu you
            will find the new <b>Sort glossentries</b> refactoring action. Invoke the action and use
            the <b>Preview</b> button to check if the sorting is properly done.</p>
        </li>
      </ol></p>
        <p>The XML Refactoring XML descriptor and XSLT stylesheet can also be found here: <xref
                href="https://github.com/oxygenxml/dita-refactoring-examples/tree/master/18.%20Sort%20Glossentries"
                format="html" scope="external"/>.</p>
        <section id="section_if2_2d2_52c">
            <title>Alternative approach - AI Positron Assistant add-on</title>
            <p>An alternative approach is to implement a custom AI action which uses a prompt to
                instruct the AI to read the contents of the referenced glossentries, extract their
                titles and then sort them: <xref
                    href="https://github.com/oxygenxml-incubator/ai-positron-assistant-samples/blob/main/Custom%20Actions/sort-glossentries-dita-map.json"
                    format="html" scope="external"/></p>
        </section>
    </body>
</topic>
